@using System.Diagnostics;
@using System.Reflection;
@using Microsoft.Win32;

@functions {
    Dictionary<string, string> props = new Dictionary<string, string>();
    string siteExtFolder = @"D:\Program Files (x86)\SiteExtensions";
    string nodeFolder = @"D:\Program Files (x86)\nodejs";
    string npmFolder = @"D:\Program Files (x86)\npm";
    string goFolder = @"D:\Program Files\Go";

    class FancyVersion : IComparable<FancyVersion>
    {
        public FancyVersion(string ver)
        {
            VersionString = ver;
        }

        public string VersionString { get; set; }

        public int CompareTo(FancyVersion other)
        {
            try
            {
                return Semver.SemVersion.Parse(VersionString).CompareTo(Semver.SemVersion.Parse(other.VersionString));
            }
            catch
            {
            }

            try
            {
                // Fall back to .net version for cases when there are 4 chunks
                return (new Version(VersionString)).CompareTo(new Version(other.VersionString));
            }
            catch
            {
                return 0;
            }
        }
    }

    // Code copied from https://github.com/Azure/azure-functions-performance-test/blob/dev/SampleUsages/TestSamples/Http-CSharp-CPUIntensive/run.csx
    class Matrix
    {
        public static void DoMatrixMultiplication(int size)
        {
            int seed = 123;
            int valueMin = 0;
            int valueMax = 101;

            int[][] matrix = CreateRandomMatrix(size, seed, valueMin, valueMax);
            seed = 2 * seed;
            int[][] matrix2 = CreateRandomMatrix(size, seed, valueMin, valueMax);
            int[][] result = MultiplyMatrix(matrix, matrix2);
        }

        public static int[][] CreateRandomMatrix(int size, int seed, int valueMin, int valueMax)
        {
            Random rng = new Random(seed);
            var matrix = new int[size][];
            for (var i = 0; i < size; i++)
            {
                var row = new int[size];
                for (var j = 0; j < size; j++)
                {
                    row[j] = rng.Next(valueMin, valueMax);
                }

                matrix[i] = row;
            }
            return matrix;
        }

        public static int[][] MultiplyMatrix(int[][] matrixA, int[][] matrixB)
        {
            int[][] result = new int[matrixA.GetLength(0)][];
            int elements = matrixB.GetLength(0);
            for (var i = 0; i < matrixA.GetLength(0); i++)
            {
                result[i] = new int[elements];
                for (var j = 0; j < matrixA.GetLength(0); j++)
                {
                    var row = matrixA[i];
                    var col = GetColumn(matrixB, j);

                    result[i][j] = MultiplyRowAndColumn(row, col);
                }
            }
            return result;
        }

        private static int MultiplyRowAndColumn(int[] row, int[] col)
        {
            int sum = 0;
            for (int b = 0; b < row.Length; b++)
            {
                sum += row[b] * col[b];
            }

            return sum;
        }

        private static int[] GetColumn(int[][] matrixB, int j)
        {
            var result = new int[matrixB.Length];
            for (int i = 0; i < matrixB.Length; i++)
            {
                result[i] = matrixB[i][j];
            }

            return result;
        }
    }
    
    void AddSiteExtension(string folderName, string name = null, string ignoreVerAndAbove = "999999999.0")
    {
        name = name ?? folderName;
        
        string extensionFolder = Path.Combine(siteExtFolder, folderName);
        if (Directory.Exists(extensionFolder))
        {
            props[name] = GetLatestVersionFromFolder(extensionFolder, ignoreVerAndAbove);
        }
        else
        {
            props[name] = "none";
        }
    }

    string GetLatestVersionFromFolder(string folder, string ignoreVerAndAbove = "999999999.0")
    {
        var maxVer = new FancyVersion(ignoreVerAndAbove);
        try
        {
            var folders = from childFolder in Directory.GetDirectories(folder)
                          let fancyVer = new FancyVersion(Path.GetFileName(childFolder))
                          where fancyVer.CompareTo(maxVer) < 0
                          orderby fancyVer descending
                          select childFolder;
                             
            string highestVersionFolder = folders.First();
            return Path.GetFileName(highestVersionFolder);
        }
        catch
        {
            return "error";
        }
    }

    private long GetTotalFreeSpace(string driveName)
    {
        foreach (DriveInfo drive in DriveInfo.GetDrives())
        {
            if (drive.IsReady && drive.Name == driveName)
            {
                return drive.TotalFreeSpace;
            }
        }
        return -1;
    }

    private static string FormatBytes(long bytes)
    {
        string[] Suffix = { "B", "KB", "MB", "GB", "TB" };
        int i;
        double dblSByte = bytes;
        for (i = 0; i < Suffix.Length && bytes >= 1024; i++, bytes /= 1024) 
        {
            dblSByte = bytes / 1024.0;
        }
    
        return String.Format("{0:0.##} {1}", dblSByte, Suffix[i]);
    }


    private static double GetWritePerf()
    {
        string testFilePath = Environment.ExpandEnvironmentVariables(@"%HOME%\site\FileSystemPerf.txt");
        
        var start = DateTime.Now;
        double total = 0;
        int maxIteration = 10;
        for (int i = 0; i < maxIteration; i++)
        {
            var iterationStart = DateTime.Now;
            File.WriteAllText(testFilePath, "Hello");

            double ms = (DateTime.Now - iterationStart).TotalMilliseconds;
            total += ms;
        }

        return (DateTime.Now - start).TotalMilliseconds / maxIteration;
    }
    
    private static double GetCpuPerf()
    {
        var start = DateTime.Now;
        
        Matrix.DoMatrixMultiplication(200);

        return (DateTime.Now - start).TotalMilliseconds;
    }
    
    void AddCpuColumn()
    {
        string cpuFile = Path.Combine(Path.GetTempPath(), "cpu.txt");
        
        if (!File.Exists(cpuFile))
        {
            // Use Node to get the cpu, since standard C# code doesn't run in sandbox
            string nodeFile = Path.Combine(Path.GetTempPath(), "cpu.js");
            File.WriteAllText(nodeFile,"var os = require('os'); console.log(os.cpus()[0].model);");
            var proc = new Process {
                StartInfo = new ProcessStartInfo {
                    FileName = @"D:\Program Files (x86)\nodejs\8.4.0\node.exe",
                    Arguments = nodeFile,
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    CreateNoWindow = true,
                    WorkingDirectory = HttpRuntime.AppDomainAppPath
                }
            };
            proc.Start();
            File.WriteAllText(cpuFile, proc.StandardOutput.ReadLine());
        }

        props["cpu$"] = File.ReadAllText(cpuFile);
    }
}

@{
    var assembly = System.Reflection.Assembly.Load("Microsoft.Web.Hosting, Version=7.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");
    var fileVersionInfo = System.Diagnostics.FileVersionInfo.GetVersionInfo(assembly.Location);
    props["waws"] = fileVersionInfo.ProductVersion;

    // Looks like 14393.2005.amd64fre.rs1_release(somename).171205-2147
    string version = (string)Microsoft.Win32.Registry.GetValue(
        @"HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion", 
        "BuildLabEx", null);
    var versionParts = version.Split('.');
    props["osversion"] = versionParts[4] + " (" + versionParts[1] + ")";

    AddCpuColumn();

    AddSiteExtension("Kudu");
    AddSiteExtension("Monaco");
    //AddSiteExtension("MobileServicesDotNet", "ZuNet");
    //AddSiteExtension("MobileServicesNode", "ZuNode");
    //AddSiteExtension("MobileAppsManagement", "ZuManage");
    //AddSiteExtension("AzureJobs");
    AddSiteExtension("MSDeploy");
    //props["msd"] = File.Exists(@"D:\Program Files (x86)\SiteExtensions\MSDeploy\3.5.51024.2802\bin\Microsoft.Web.Deployment.dll").ToString();
    AddSiteExtension("DaaS");
    AddSiteExtension("LogAnalyzer");
    //AddSiteExtension("SecurityInsightAdmin", "SecInsight");
    //props["func2"] = GetLatestVersionFromFolder(@"D:\Program Files (x86)\SiteExtensions\Functions", "0.3");
    //props["func3"] = GetLatestVersionFromFolder(@"D:\Program Files (x86)\SiteExtensions\Functions", "0.4");
    AddSiteExtension("Functions", ignoreVerAndAbove: "1.0.99999");
    AddSiteExtension("Functions", "func20");
    //AddSiteExtension("Functions", "funcbeta");
    //AddSiteExtension("routing");
    //AddSiteExtension("ApiAppsGateway", "Gateway");
    //AddSiteExtension("Zray54");
    //AddSiteExtension("appidentify");
    //props["AIHttpMod"] = GetLatestVersionFromFolder(@"D:\Program Files\AppInsightsHttpModule");
    //AddSiteExtension("PerformanceTesting", "perf");
    //AddSiteExtension("AzureBotService", "bot", ignoreVerAndAbove: "2.0");
    AddSiteExtension("QNAMaker");
    AddSiteExtension("InstrumentationEngine", "InstrEngine");
    AddSiteExtension("ApplicationInsightsAgent", "AIAgent");
    AddSiteExtension("DiagnosticServices", "DiagSvc");
    AddSiteExtension("SnapshotDebugger", "SnapDbg");
    AddSiteExtension("ApimGateway", "Apim");

    //props["pubdll"] = File.Exists(@"D:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v14.0\Web\Microsoft.Web.Publishing.Tasks.dll").ToString();
    //props["analysis"] = File.Exists(@"D:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v14.0\CodeAnalysis\fxcoptask.dll").ToString();
    props["core10"] = GetLatestVersionFromFolder(@"D:\Program Files (x86)\dotnet\shared\Microsoft.NETCore.App", "1.0.99");
    props["core11"] = GetLatestVersionFromFolder(@"D:\Program Files (x86)\dotnet\shared\Microsoft.NETCore.App", "1.1.99");
    props["core20"] = GetLatestVersionFromFolder(@"D:\Program Files (x86)\dotnet\shared\Microsoft.NETCore.App", "2.0.99");
    props["core21"] = GetLatestVersionFromFolder(@"D:\Program Files (x86)\dotnet\shared\Microsoft.NETCore.App");
    props["sdk"] = GetLatestVersionFromFolder(@"D:\Program Files (x86)\dotnet\sdk");

    using (RegistryKey key = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full"))
    {
        props[".NET"] = key.GetValue("Release").ToString();
    }

    fileVersionInfo = System.Diagnostics.FileVersionInfo.GetVersionInfo(@"D:\Program Files (x86)\iisnode\iisnode.dll");
    props["iisnode"] = fileVersionInfo.FileVersion;
    
    fileVersionInfo = System.Diagnostics.FileVersionInfo.GetVersionInfo(@"C:\Windows\SysWOW64\inetsrv\aspnetcore.dll");
    props["ancm"] = fileVersionInfo.FileVersion;
    
    props["mds"] = GetLatestVersionFromFolder(@"D:\Program Files\Mds");

    //props["Node4"] = GetLatestVersionFromFolder(nodeFolder, "5");
    //props["Node6"] = GetLatestVersionFromFolder(nodeFolder, "7");
    //props["Node7"] = GetLatestVersionFromFolder(nodeFolder, "8");
    props["Node8"] = GetLatestVersionFromFolder(nodeFolder, "9");
    props["Node10"] = GetLatestVersionFromFolder(nodeFolder);
    //props["npm1"] = GetLatestVersionFromFolder(npmFolder, "2");
    props["npm"] = GetLatestVersionFromFolder(npmFolder);
    //props["go"] = GetLatestVersionFromFolder(goFolder);
    //props["jdbc"] = File.Exists(@"D:\Program Files (x86)\apache-tomcat-8.0.23\lib\sqljdbc.jar").ToString();
    //props["MA"] = File.Exists(@"D:\Program Files\Mds\34.2.3.0\agent\MonAgentLauncher.exe").ToString();

    //props["dotnet"] = Environment.GetEnvironmentVariable("PATH").Contains("dotnet").ToString();

    string appHostPath = Environment.ExpandEnvironmentVariables(@"%tmp%\..\config\applicationhost.config");
    string appHostContent = File.ReadAllText(appHostPath);
    
    //props["Fx452Refs"] = File.Exists(@"D:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Accessibility.dll").ToString();
    
/*    
    Assembly a=null;
    try
    {
        a = Assembly.Load("System.Security.Cryptography.Algorithms, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");
    }
    catch
    {
    }
    props["crypt"] = (a != null).ToString();
*/    

    // Test if d:\home is writable
/*    
    try
    {
        File.WriteAllText(@"d:\home\dummy.txt", "Dummy file");
        props["RootFile"] = "writable";
    }
    catch (Exception e)
    {
        props["RootFile"] = "r/o";
    }
*/
    
    try
    {
        //props["en-SE"] = System.Globalization.CultureInfo.GetCultureInfo("en-SE").DisplayName;
    }
    catch
    {
        props["en-SE"] = "No";
    }

    props["FreeDSpace$"] = FormatBytes(GetTotalFreeSpace(@"D:\"));

/*
    try
    {
        props["WritePerf$"] = GetWritePerf().ToString("0.00");
    }
    catch
    {
        props["WritePerf$"] = "error";
    }
*/

    //props["CPUPerf$"] = GetCpuPerf().ToString();
    
    /*
    try {
        var client = new System.Net.Http.HttpClient();
        var response = client.GetAsync("http://api.shoplo.com/").Result;
        props["httptest"] = response.StatusCode.ToString();
    }
    catch (Exception e)
    {
        props["httptest"] = e.Message;
    }
    */
    
    //props["4.5.1 SDK"] = (File.Exists(@"D:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.1\Accessibility.dll") &&
    //                     File.Exists(@"D:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.1\Accessibility.xml")).ToString();

    //props["4.5.2 SDK"] = File.Exists(@"D:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\facades\System.Collections.dll").ToString();

    //props["UNENCODED_URL$"] = Request.ServerVariables["UNENCODED_URL"];
    
    //props["ScmSep"] = appHostContent.Contains(@"add name=""~1").ToString();
    
    //props["PHP55"] = (appHostContent.Contains(@"PHP55_via_FastCGI") && appHostContent.Contains(@"D:\Program Files (x86)\PHP\v5.5\php-cgi.exe")).ToString();

    //var info = new FileInfo(@"D:\Program Files\iisnode\interceptor.js");
    //props["interceptor"] = info.Length.ToString();

    // Time is not that useful, so yanking it
    //props["time"] = File.GetCreationTimeUtc(mwhAssembly.Location).ToString();
    
    Response.ContentType = "application/json";
}

@Html.Raw(Json.Encode(props))
